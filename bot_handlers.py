from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from states import BotState, UserStates
from google_sheets import GoogleSheetsManager
from utils import format_report_message
import re

class BotHandlers:
    def __init__(self, user_states: UserStates):
        self.user_states = user_states
        self.sheets_manager = GoogleSheetsManager()
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        self.user_states.reset_user_data(user_id)
        
        keyboard = [[InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç", callback_data="create_report")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç.\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
            reply_markup=reply_markup
        )
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        user_data = self.user_states.get_user_data(user_id)
        data = query.data
        
        if data == "create_report":
            await self._start_report_creation(query, user_id)
        elif data.startswith("rating_"):
            await self._handle_rating_selection(query, user_id, data)
        elif data.startswith("task_"):
            await self._handle_task_selection(query, user_id, data)
        elif data == "add_more_tasks":
            await self._handle_add_more_tasks(query, user_id)
        elif data == "next_step":
            await self._handle_next_step(query, user_id)
        elif data == "edit_task":
            await self._handle_edit_task(query, user_id)
        elif data.startswith("edit_task_"):
            await self._handle_edit_specific_task(query, user_id, data)
        elif data.startswith("priority_"):
            await self._handle_priority_selection(query, user_id, data)
        elif data == "confirm_report":
            await self._handle_confirm_report(query, user_id)
        elif data == "edit_report":
            await self._handle_edit_report(query, user_id)
        elif data.startswith("edit_"):
            await self._handle_edit_section(query, user_id, data)
    
    async def _start_report_creation(self, query, user_id):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞"""
        self.user_states.set_state(user_id, BotState.WAITING_FOR_WEEK_NUMBER)
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç—á—ë—Ç–∞:")
    
    async def _handle_rating_selection(self, query, user_id, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏"""
        rating = int(data.split("_")[1])
        user_data = self.user_states.get_user_data(user_id)
        user_data.rating = rating
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        prev_tasks = self.sheets_manager.get_previous_week_tasks(user_data.week_number)
        user_data.previous_planned_tasks = prev_tasks
        
        if prev_tasks:
            keyboard = []
            for i, task in enumerate(prev_tasks):
                keyboard.append([InlineKeyboardButton(f"‚úÖ {task}", callback_data=f"task_{i}")])
            keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next_step")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            self.user_states.set_state(user_id, BotState.SELECTING_COMPLETED_TASKS)
            
            await query.edit_message_text(
                f"–û—Ü–µ–Ω–∫–∞ –Ω–µ–¥–µ–ª–∏: {rating}/10\n\n"
                "–í–æ—Ç –∑–∞–¥–∞—á–∏ –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é. –ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ?",
                reply_markup=reply_markup
            )
        else:
            self.user_states.set_state(user_id, BotState.ADDING_ADDITIONAL_TASKS)
            await query.edit_message_text(
                f"–û—Ü–µ–Ω–∫–∞ –Ω–µ–¥–µ–ª–∏: {rating}/10\n\n"
                "–ó–∞–¥–∞—á –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ (–ø–æ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ):"
            )
    
    async def _handle_task_selection(self, query, user_id, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á"""
        task_index = int(data.split("_")[1])
        user_data = self.user_states.get_user_data(user_id)
        
        if task_index < len(user_data.previous_planned_tasks):
            task = user_data.previous_planned_tasks[task_index]
            
            if task in user_data.completed_tasks:
                user_data.completed_tasks.remove(task)
                user_data.incomplete_tasks.append(task)
            else:
                user_data.incomplete_tasks.remove(task) if task in user_data.incomplete_tasks else None
                user_data.completed_tasks.append(task)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = []
            for i, t in enumerate(user_data.previous_planned_tasks):
                status = "‚úÖ" if t in user_data.completed_tasks else "‚ùå"
                keyboard.append([InlineKeyboardButton(f"{status} {t}", callback_data=f"task_{i}")])
            keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next_step")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_reply_markup(reply_markup=reply_markup)
    
    async def _handle_next_step(self, query, user_id):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É"""
        user_data = self.user_states.get_user_data(user_id)
        
        if user_data.state == BotState.SELECTING_COMPLETED_TASKS:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
            self.user_states.set_state(user_id, BotState.ADDING_ADDITIONAL_TASKS)
            keyboard = [[InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="next_step")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "–ß—Ç–æ –µ—â—ë –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ? (–Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ):",
                reply_markup=reply_markup
            )
        elif user_data.state == BotState.ADDING_ADDITIONAL_TASKS:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–¥–∞—á
            self.user_states.set_state(user_id, BotState.ADDING_PLANNED_TASKS)
            await query.edit_message_text("–ß—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é? (–Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ):")
        elif user_data.state == BotState.ADDING_PLANNED_TASKS:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
            if user_data.planned_tasks:
                await self._select_priority_task(query, user_id)
            else:
                self.user_states.set_state(user_id, BotState.WAITING_FOR_COMMENT)
                await query.edit_message_text("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç—á—ë—Ç—É:")
    
    async def _select_priority_task(self, query, user_id):
        """–í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        user_data = self.user_states.get_user_data(user_id)
        
        keyboard = []
        for i, task in enumerate(user_data.planned_tasks):
            keyboard.append([InlineKeyboardButton(task, callback_data=f"priority_{i}")])
        keyboard.append([InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="next_step")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        self.user_states.set_state(user_id, BotState.SELECTING_PRIORITY_TASK)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö:",
            reply_markup=reply_markup
        )
    
    async def _handle_priority_selection(self, query, user_id, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        task_index = int(data.split("_")[1])
        user_data = self.user_states.get_user_data(user_id)
        
        if task_index < len(user_data.planned_tasks):
            user_data.priority_task = user_data.planned_tasks[task_index]
        
        self.user_states.set_state(user_id, BotState.WAITING_FOR_COMMENT)
        await query.edit_message_text("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç—á—ë—Ç—É:")
    
    async def _handle_confirm_report(self, query, user_id):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞"""
        user_data = self.user_states.get_user_data(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        success = self.sheets_manager.save_report(
            user_data.week_number,
            user_data.completed_tasks,
            user_data.incomplete_tasks,
            user_data.planned_tasks,
            user_data.comment,
            user_data.rating
        )
        
        if success:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
            report_text = format_report_message(user_data)
            
            await query.edit_message_text(
                "‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n" + report_text
            )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_states.reset_user_data(user_id)
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            )
    
    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        user_data = self.user_states.get_user_data(user_id)
        text = update.message.text.strip()
        
        if user_data.state == BotState.WAITING_FOR_WEEK_NUMBER:
            await self._handle_week_number(update, user_id, text)
        elif user_data.state == BotState.ADDING_ADDITIONAL_TASKS:
            await self._handle_additional_task(update, user_id, text)
        elif user_data.state == BotState.ADDING_PLANNED_TASKS:
            await self._handle_planned_task(update, user_id, text)
        elif user_data.state == BotState.WAITING_FOR_COMMENT:
            await self._handle_comment(update, user_id, text)
        elif user_data.state == BotState.EDITING_TASK:
            await self._handle_task_edit(update, user_id, text)
    
    async def _handle_week_number(self, update, user_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏"""
        try:
            week_number = int(text)
            if week_number <= 0:
                await update.message.reply_text("–ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
            
            user_data = self.user_states.get_user_data(user_id)
            user_data.week_number = week_number
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            keyboard = []
            for i in range(1, 11):
                keyboard.append([InlineKeyboardButton(str(i), callback_data=f"rating_{i}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            self.user_states.set_state(user_id, BotState.WAITING_FOR_RATING)
            
            await update.message.reply_text(
                f"–ù–µ–¥–µ–ª—è {week_number}\n\n–û—Ü–µ–Ω–∏—Ç–µ –Ω–µ–¥–µ–ª—é –æ—Ç 1 –¥–æ 10:",
                reply_markup=reply_markup
            )
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ (—á–∏—Å–ª–æ).")
    
    async def _handle_additional_task(self, update, user_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á"""
        user_data = self.user_states.get_user_data(user_id)
        user_data.completed_tasks.append(text)
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_more_tasks")],
            [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next_step")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {text}\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=reply_markup
        )
    
    async def _handle_planned_task(self, update, user_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        user_data = self.user_states.get_user_data(user_id)
        user_data.planned_tasks.append(text)
        
        keyboard = [
            [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next_step")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="edit_task")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {text}\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=reply_markup
        )
    
    async def _handle_comment(self, update, user_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        user_data = self.user_states.get_user_data(user_id)
        user_data.comment = text
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        report_preview = format_report_message(user_data)
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_report")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_report")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        self.user_states.set_state(user_id, BotState.CONFIRMING_REPORT)
        
        await update.message.reply_text(
            f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç:\n\n{report_preview}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç—á—ë—Ç?",
            reply_markup=reply_markup
        )
    
    async def _handle_add_more_tasks(self, query, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á"""
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É:")
    
    async def _handle_edit_task(self, query, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        user_data = self.user_states.get_user_data(user_id)
        
        if not user_data.planned_tasks:
            await query.edit_message_text("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        
        keyboard = []
        for i, task in enumerate(user_data.planned_tasks):
            keyboard.append([InlineKeyboardButton(task, callback_data=f"edit_task_{i}")])
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="next_step")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )
    
    async def _handle_edit_specific_task(self, query, user_id, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        task_index = int(data.split("_")[2])
        user_data = self.user_states.get_user_data(user_id)
        
        if task_index < len(user_data.planned_tasks):
            user_data.editing_task_index = task_index
            self.user_states.set_state(user_id, BotState.EDITING_TASK)
            
            await query.edit_message_text(
                f"–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞: {user_data.planned_tasks[task_index]}\n\n"
                "–í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–¥–∞—á—É:"
            )
    
    async def _handle_task_edit(self, update, user_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        user_data = self.user_states.get_user_data(user_id)
        
        if user_data.editing_task_index is not None:
            user_data.planned_tasks[user_data.editing_task_index] = text
            user_data.editing_task_index = None
            
            self.user_states.set_state(user_id, BotState.ADDING_PLANNED_TASKS)
            
            keyboard = [
                [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next_step")],
                [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="edit_task")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"–ó–∞–¥–∞—á–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: {text}\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=reply_markup
            )
    
    async def _handle_edit_report(self, query, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞"""
        keyboard = [
            [InlineKeyboardButton("üìÖ –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏", callback_data="edit_week")],
            [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∫–∞", callback_data="edit_rating")],
            [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏", callback_data="edit_completed")],
            [InlineKeyboardButton("üìã –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –∑–∞–¥–∞—á–∏", callback_data="edit_planned")],
            [InlineKeyboardButton("üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞", callback_data="edit_priority")],
            [InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="edit_comment")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="confirm_report")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –æ—Ç—á—ë—Ç–µ?",
            reply_markup=reply_markup
        )
    
    async def _handle_edit_section(self, query, user_id, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞"""
        section = data.split("_")[1]
        
        if section == "week":
            self.user_states.set_state(user_id, BotState.WAITING_FOR_WEEK_NUMBER)
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏:")
        elif section == "rating":
            keyboard = []
            for i in range(1, 11):
                keyboard.append([InlineKeyboardButton(str(i), callback_data=f"rating_{i}")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É:", reply_markup=reply_markup)
        elif section == "comment":
            self.user_states.set_state(user_id, BotState.WAITING_FOR_COMMENT)
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        # –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–µ–∫—Ü–∏–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
