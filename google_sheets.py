import os
import json
import re
from datetime import datetime
from google.auth.transport.requests import Request
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from typing import List, Dict, Optional

class GoogleSheetsManager:
    def __init__(self):
        self.credentials = self._get_credentials()
        self.sheet_id = os.getenv('GOOGLE_SHEET_ID')
        self.service = build('sheets', 'v4', credentials=self.credentials)
        self.sheet = self.service.spreadsheets()
    
    def _get_credentials(self):
        creds_json = os.getenv('GOOGLE_CREDENTIALS')
        if not creds_json:
            raise ValueError("GOOGLE_CREDENTIALS environment variable not set")
        
        creds_dict = json.loads(creds_json)
        return Credentials.from_service_account_info(creds_dict)
    
    def _format_date_russian(self, dt):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ä—É—Å—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        months = [
            "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
            "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
        ]
        day = dt.day
        month = months[dt.month - 1]
        year = dt.year
        time = dt.strftime('%H:%M')
        return f"{day} {month} {year}, {time}"
    
    def _clean_week_number(self, week_str: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        if not week_str:
            return ""
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã (–ø—Ä–æ–±–µ–ª—ã, —Ç–æ—á–∫–∏ –∏ —Ç.–¥.)
        cleaned = re.sub(r"[^0-9]", "", str(week_str))
        print(f"üßπ _clean_week_number: '{week_str}' -> '{cleaned}' (–¥–ª–∏–Ω–∞: {len(week_str)} -> {len(cleaned)})")
        return cleaned
    
    def _safe_get_cell(self, row: List[str], index: int) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        try:
            if index < len(row):
                return row[index] if row[index] is not None else ""
            return ""
        except (IndexError, TypeError):
            return ""
    
    def get_previous_week_tasks(self, week_number: int) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏"""
        debug_info = {
            'total_checks': 0,
            'week_found': False,
            'data_found': False,
            'rows_analyzed': 0,
            'exact_matches': [],
            'close_matches': [],
            'all_weeks_found': [],
            'errors': []
        }
        
        try:
            print(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ò—â–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–µ–¥–µ–ª–∏ {week_number}, –ø—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è: {week_number - 1}")
            debug_info['target_week'] = week_number - 1
            debug_info['total_checks'] += 1
            
            if week_number <= 1:
                debug_info['errors'].append("–ù–µ–¥–µ–ª—è <= 1")
                print("‚ö†Ô∏è [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ù–µ–¥–µ–ª—è <= 1, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                self._save_debug_info(debug_info)
                return []
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ª–∏—Å—Ç—É WeeklyReports
            range_name = 'WeeklyReports!A:G'
            print(f"üìä [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {range_name}")
            
            result = self.sheet.values().get(
                spreadsheetId=self.sheet_id,
                range=range_name
            ).execute()
            debug_info['total_checks'] += 1
            
            values = result.get('values', [])
            debug_info['rows_total'] = len(values)
            print(f"üìä [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {len(values)}")
            
            if not values:
                debug_info['errors'].append("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è")
                print("‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è")
                self._save_debug_info(debug_info)
                return []
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if len(values) > 0:
                debug_info['headers'] = values[0]
                print(f"üìã [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ó–∞–≥–æ–ª–æ–≤–∫–∏: {values[0]}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                expected_headers = ['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞', '–ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏', '–û—Ü–µ–Ω–∫–∞ –Ω–µ–¥–µ–ª–∏', '–°–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', '–ù–µ —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']
                if len(values[0]) >= 6:
                    print(f"üìã [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ö–æ–ª–æ–Ω–∫–∞ F (–∏–Ω–¥–µ–∫—Å 5): '{values[0][5] if len(values[0]) > 5 else '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}'")
            
            prev_week = week_number - 1
            print(f"üéØ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ò—â–µ–º –Ω–µ–¥–µ–ª—é: '{prev_week}'")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            print(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(values) - 1}")
            debug_info['rows_analyzed'] = len(values) - 1
            
            # –ü–ï–†–í–´–ô –ü–†–û–•–û–î: –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            print(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] === –ü–ï–†–í–´–ô –ü–†–û–•–û–î: –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –Ω–µ–¥–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ ===")
            for i, row in enumerate(values[1:], 1):
                week_cell = self._safe_get_cell(row, 1)
                cleaned_week = self._clean_week_number(week_cell)
                if cleaned_week:
                    debug_info['all_weeks_found'].append({
                        'row': i,
                        'original': week_cell,
                        'cleaned': cleaned_week,
                        'as_int': int(cleaned_week) if cleaned_week.isdigit() else None
                    })
            
            print(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –Ω–µ–¥–µ–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ:")
            for week_info in debug_info['all_weeks_found']:
                print(f"   –°—Ç—Ä–æ–∫–∞ {week_info['row']}: '{week_info['original']}' -> '{week_info['cleaned']}' -> {week_info['as_int']}")
            
            # –í–¢–û–†–û–ô –ü–†–û–•–û–î: –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–π –Ω–µ–¥–µ–ª–∏
            print(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] === –í–¢–û–†–û–ô –ü–†–û–•–û–î: –ü–æ–∏—Å–∫ –Ω–µ–¥–µ–ª–∏ {prev_week} ===")
            
            for i, row in enumerate(values[1:], 1):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                debug_info['total_checks'] += 1
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
                week_cell = self._safe_get_cell(row, 1)  # –ö–æ–ª–æ–Ω–∫–∞ B (–∏–Ω–¥–µ–∫—Å 1)
                cleaned_week = self._clean_week_number(week_cell)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                print(f"üìÑ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –°—Ç—Ä–æ–∫–∞ {i}: {row}")
                print(f"   –ù–µ–¥–µ–ª—è RAW: '{week_cell}' (–¥–ª–∏–Ω–∞: {len(week_cell)}, —Ç–∏–ø: {type(week_cell)})")
                print(f"   –ù–µ–¥–µ–ª—è CLEAN: '{cleaned_week}' (–¥–ª–∏–Ω–∞: {len(cleaned_week)})")
                print(f"   –ò—â–µ–º: '{prev_week}' (—Ç–∏–ø: {type(prev_week)})")
                
                # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                string_match = cleaned_week == str(prev_week)
                int_match = cleaned_week.isdigit() and int(cleaned_week) == prev_week
                contains_match = str(prev_week) in cleaned_week
                
                print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∏: string_match={string_match}, int_match={int_match}, contains_match={contains_match}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–∏–∑–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                if contains_match or abs(int(cleaned_week) - prev_week) <= 1 if cleaned_week.isdigit() else False:
                    debug_info['close_matches'].append({
                        'row': i,
                        'week_cell': week_cell,
                        'cleaned': cleaned_week,
                        'row_data': row[:6]  # –ü–µ—Ä–≤—ã–µ 6 –∫–æ–ª–æ–Ω–æ–∫
                    })
                
                # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                week_matches = string_match or int_match
                
                if week_matches:
                    debug_info['week_found'] = True
                    debug_info['exact_matches'].append({'row': i, 'data': row})
                    print(f"‚úÖ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ù–ê–ô–î–ï–ù–ê –°–¢–†–û–ö–ê –¥–ª—è –Ω–µ–¥–µ–ª–∏ {prev_week}!")
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ F (–∏–Ω–¥–µ–∫—Å 5)
                    planned_tasks_cell = self._safe_get_cell(row, 5)
                    print(f"üìù [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ö–æ–ª–æ–Ω–∫–∞ F (–∏–Ω–¥–µ–∫—Å 5, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏):")
                    print(f"   RAW: '{planned_tasks_cell}'")
                    print(f"   –î–ª–∏–Ω–∞: {len(planned_tasks_cell)}")
                    print(f"   –¢–∏–ø: {type(planned_tasks_cell)}")
                    print(f"   –ü–æ—Å–ª–µ strip(): '{planned_tasks_cell.strip()}'")
                    print(f"   –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ: {bool(planned_tasks_cell and planned_tasks_cell.strip())}")
                    
                    if planned_tasks_cell and planned_tasks_cell.strip():
                        debug_info['data_found'] = True
                        # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫–∏
                        planned_tasks = planned_tasks_cell.split('\n')
                        clean_tasks = [task.strip() for task in planned_tasks if task.strip()]
                        print(f"üéØ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {clean_tasks}")
                        debug_info['found_tasks'] = clean_tasks
                        self._save_debug_info(debug_info)
                        return clean_tasks
                    else:
                        debug_info['errors'].append(f"–ö–æ–ª–æ–Ω–∫–∞ F –ø—É—Å—Ç–∞—è –≤ —Å—Ç—Ä–æ–∫–µ {i}")
                        print("‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ö–æ–ª–æ–Ω–∫–∞ F –ø—É—Å—Ç–∞—è –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            print(f"‚ùå [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] === –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
            print(f"   –ò—Å–∫–∞–ª–∏ –Ω–µ–¥–µ–ª—é: {prev_week}")
            print(f"   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {debug_info['total_checks']}")
            print(f"   –°—Ç—Ä–æ–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {debug_info['rows_analyzed']}")
            print(f"   –ù–µ–¥–µ–ª—è –Ω–∞–π–¥–µ–Ω–∞: {debug_info['week_found']}")
            print(f"   –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã: {debug_info['data_found']}")
            print(f"   –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {len(debug_info['exact_matches'])}")
            print(f"   –ë–ª–∏–∑–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {len(debug_info['close_matches'])}")
            
            if debug_info['close_matches']:
                print(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ë–ª–∏–∑–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):")
                for match in debug_info['close_matches']:
                    print(f"   –°—Ç—Ä–æ–∫–∞ {match['row']}: '{match['week_cell']}' -> '{match['cleaned']}'")
            
            self._save_debug_info(debug_info)
            return []
            
        except Exception as e:
            debug_info['errors'].append(f"Exception: {str(e)}")
            print(f"üí• [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
            self._save_debug_info(debug_info)
            return []
    
    def _save_debug_info(self, debug_info):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–ª–∞—Å—Å–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤
        self.last_debug_info = debug_info
        print(f"üíæ [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {len(debug_info)} –∫–ª—é—á–µ–π")
    
    def get_last_debug_summary(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        if not hasattr(self, 'last_debug_info'):
            return "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å"
        
        info = self.last_debug_info
        summary = f"""
üîç **–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–ò–°–ö–ê –ó–ê–î–ê–ß:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {info.get('total_checks', 0)}
‚Ä¢ –°—Ç—Ä–æ–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {info.get('rows_analyzed', 0)}
‚Ä¢ –ù–µ–¥–µ–ª—è –Ω–∞–π–¥–µ–Ω–∞: {'‚úÖ –î–ê' if info.get('week_found') else '‚ùå –ù–ï–¢'}
‚Ä¢ –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã: {'‚úÖ –î–ê' if info.get('data_found') else '‚ùå –ù–ï–¢'}
‚Ä¢ –¢–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(info.get('exact_matches', []))}
‚Ä¢ –ë–ª–∏–∑–∫–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(info.get('close_matches', []))}
‚Ä¢ –í—Å–µ–≥–æ –Ω–µ–¥–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(info.get('all_weeks_found', []))}
‚Ä¢ –û—à–∏–±–æ–∫: {len(info.get('errors', []))}

üìã **–ù–ê–ô–î–ï–ù–ù–´–ï –ù–ï–î–ï–õ–ò:** {[w['as_int'] for w in info.get('all_weeks_found', []) if w['as_int']]}
"""
        
        if info.get('errors'):
            summary += f"\n‚ö†Ô∏è **–û–®–ò–ë–ö–ò:** {', '.join(info.get('errors', []))}"
        
        return summary.strip()
    
    def get_all_week_numbers(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            result = self.sheet.values().get(
                spreadsheetId=self.sheet_id,
                range='WeeklyReports!B:B'
            ).execute()
            
            values = result.get('values', [])
            if not values:
                return []
            
            week_numbers = []
            for row in values[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                week_cell = self._safe_get_cell(row, 0)
                cleaned_week = self._clean_week_number(week_cell)
                
                if cleaned_week and cleaned_week.isdigit():
                    week_numbers.append(int(cleaned_week))
            
            return sorted(list(set(week_numbers)))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        except Exception as e:
            print(f"Error getting week numbers: {e}")
            return []
    
    def delete_week_report(self, week_number: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é"""
        try:
            print(f"üóëÔ∏è [–£–î–ê–õ–ï–ù–ò–ï] –£–¥–∞–ª—è–µ–º –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é {week_number}")
            
            result = self.sheet.values().get(
                spreadsheetId=self.sheet_id,
                range='WeeklyReports!A:G'
            ).execute()
            
            values = result.get('values', [])
            if not values:
                return False
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –æ—Ç—á–µ—Ç–æ–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é
            print(f"üîç [–£–î–ê–õ–ï–ù–ò–ï] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(values)-1} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
            
            for i, row in enumerate(values[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—Ç—Ä–æ–∫–∏ 2
                week_cell = self._safe_get_cell(row, 1)
                cleaned_week = self._clean_week_number(week_cell)
                print(f"üìÑ [–£–î–ê–õ–ï–ù–ò–ï] –°—Ç—Ä–æ–∫–∞ {i}: –Ω–µ–¥–µ–ª—è '{week_cell}' -> '{cleaned_week}'")
                
                # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–∫ –≤ get_previous_week_tasks
                week_matches = (
                    cleaned_week == str(week_number) or
                    (cleaned_week.isdigit() and int(cleaned_week) == week_number)
                )
                
                if week_matches:
                    print(f"‚úÖ [–£–î–ê–õ–ï–ù–ò–ï] –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {i} –¥–ª—è –Ω–µ–¥–µ–ª–∏ {week_number}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ sheetId
                    sheet_metadata = self.service.spreadsheets().get(
                        spreadsheetId=self.sheet_id
                    ).execute()
                    
                    sheet_id = None
                    for sheet in sheet_metadata['sheets']:
                        if sheet['properties']['title'] == 'WeeklyReports':
                            sheet_id = sheet['properties']['sheetId']
                            break
                    
                    if sheet_id is None:
                        sheet_id = 0  # Fallback –∫ –ø–µ—Ä–≤–æ–º—É –ª–∏—Å—Ç—É
                    
                    print(f"üìä [–£–î–ê–õ–ï–ù–ò–ï] –ò—Å–ø–æ–ª—å–∑—É–µ–º sheetId: {sheet_id}")
                    
                    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
                    request = {
                        'requests': [
                            {
                                'deleteDimension': {
                                    'range': {
                                        'sheetId': sheet_id,
                                        'dimension': 'ROWS',
                                        'startIndex': i - 1,
                                        'endIndex': i
                                    }
                                }
                            }
                        ]
                    }
                    
                    self.service.spreadsheets().batchUpdate(
                        spreadsheetId=self.sheet_id,
                        body=request
                    ).execute()
                    
                    print(f"‚úÖ [–£–î–ê–õ–ï–ù–ò–ï] –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é {week_number}")
                    return True
            
            return False
        except Exception as e:
            print(f"Error deleting week report: {e}")
            return False
    
    def save_report(self, week_number: int, completed_tasks: List[str], 
                   incomplete_tasks: List[str], planned_tasks: List[str], 
                   comment: str, rating: int) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Google Sheets"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å —Ä—É—Å—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã
            date_str = self._format_date_russian(datetime.now())
            completed_str = '\n'.join(completed_tasks) if completed_tasks else ''
            incomplete_str = '\n'.join(incomplete_tasks) if incomplete_tasks else ''
            planned_str = '\n'.join(planned_tasks) if planned_tasks else ''
            comment_str = comment if comment else ''
            
            # –ü–æ—Ä—è–¥–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —Ç–∞–±–ª–∏—Ü—ã:
            # A: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞
            # B: –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏  
            # C: –û—Ü–µ–Ω–∫–∞ –Ω–µ–¥–µ–ª–∏
            # D: –°–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            # E: –ù–µ —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            # F: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            # G: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            values = [[
                date_str,           # A: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞ (—Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)
                str(week_number),   # B: –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
                str(rating),        # C: –û—Ü–µ–Ω–∫–∞ –Ω–µ–¥–µ–ª–∏
                completed_str,      # D: –°–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                incomplete_str,     # E: –ù–µ —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                planned_str,        # F: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                comment_str         # G: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            ]]
            
            print(f"üìÖ Saving report with date: {date_str}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            result = self.sheet.values().get(
                spreadsheetId=self.sheet_id,
                range='A1:G1'
            ).execute()
            
            if not result.get('values'):
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = [['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞', '–ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏', '–û—Ü–µ–Ω–∫–∞ –Ω–µ–¥–µ–ª–∏', 
                          '–°–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', '–ù–µ —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']]
                self.sheet.values().update(
                    spreadsheetId=self.sheet_id,
                    range='A1:G1',
                    valueInputOption='USER_ENTERED',
                    body={'values': headers}
                ).execute()
                print("‚úÖ Headers added to sheet")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
            if self.check_week_exists(week_number):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç
                self._update_existing_report(week_number, values[0])
                print(f"‚úÖ Updated report for week {week_number}")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
                self.sheet.values().append(
                    spreadsheetId=self.sheet_id,
                    range='A:G',
                    valueInputOption='USER_ENTERED',
                    insertDataOption='INSERT_ROWS',
                    body={'values': values}
                ).execute()
                print(f"‚úÖ Added new report for week {week_number}")
            
            return True
        except Exception as e:
            print(f"Error saving report: {e}")
            return False
    
    def _update_existing_report(self, week_number: int, new_data: List[str]) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç"""
        try:
            result = self.sheet.values().get(
                spreadsheetId=self.sheet_id,
                range='A:G'
            ).execute()
            
            values = result.get('values', [])
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –æ—Ç—á–µ—Ç–æ–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é
            for i, row in enumerate(values[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—Ç—Ä–æ–∫–∏ 2
                week_cell = self._safe_get_cell(row, 1)
                cleaned_week = self._clean_week_number(week_cell)
                
                if cleaned_week == str(week_number):
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
                    range_name = f'A{i}:G{i}'
                    self.sheet.values().update(
                        spreadsheetId=self.sheet_id,
                        range=range_name,
                        valueInputOption='USER_ENTERED',
                        body={'values': [new_data]}
                    ).execute()
                    return True
            
            return False
        except Exception as e:
            print(f"Error updating existing report: {e}")
            return False
    
    def check_week_exists(self, week_number: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é"""
        try:
            result = self.sheet.values().get(
                spreadsheetId=self.sheet_id,
                range='A:B'
            ).execute()
            
            values = result.get('values', [])
            for row in values[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                week_cell = self._safe_get_cell(row, 1)
                cleaned_week = self._clean_week_number(week_cell)
                
                if cleaned_week == str(week_number):
                    return True
            return False
        except Exception as e:
            print(f"Error checking week existence: {e}")
            return False
    
    def get_week_report(self, week_number: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é"""
        try:
            result = self.sheet.values().get(
                spreadsheetId=self.sheet_id,
                range='WeeklyReports!A:G'
            ).execute()
            
            values = result.get('values', [])
            if not values:
                return None
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ—Ç—á–µ—Ç–æ–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é
            for i, row in enumerate(values[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—Ç—Ä–æ–∫–∏ 2
                week_cell = self._safe_get_cell(row, 1)
                cleaned_week = self._clean_week_number(week_cell)
                
                # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                week_matches = (
                    cleaned_week == str(week_number) or
                    (cleaned_week.isdigit() and int(cleaned_week) == week_number)
                )
                
                if week_matches:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
                    return {
                        'date': self._safe_get_cell(row, 0),
                        'week_number': week_number,
                        'rating': int(self._safe_get_cell(row, 2)) if self._safe_get_cell(row, 2).isdigit() else 0,
                        'completed_tasks': self._safe_get_cell(row, 3).split('\n') if self._safe_get_cell(row, 3) else [],
                        'incomplete_tasks': self._safe_get_cell(row, 4).split('\n') if self._safe_get_cell(row, 4) else [],
                        'planned_tasks': self._safe_get_cell(row, 5).split('\n') if self._safe_get_cell(row, 5) else [],
                        'comment': self._safe_get_cell(row, 6)
                    }
            
            return None
        except Exception as e:
            print(f"Error getting week report: {e}")
            return None

    def clear_sheet(self) -> bool:
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤) - –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        try:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
            self.sheet.values().clear(
                spreadsheetId=self.sheet_id,
                range='A2:G1000'
            ).execute()
            print("‚úÖ Sheet cleared")
            return True
        except Exception as e:
            print(f"Error clearing sheet: {e}")
            return False
