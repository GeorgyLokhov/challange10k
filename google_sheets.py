import os
import json
import re
from datetime import datetime
from google.auth.transport.requests import Request
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from typing import List, Dict, Optional

class GoogleSheetsManager:
    def __init__(self):
        self.credentials = self._get_credentials()
        self.sheet_id = os.getenv('GOOGLE_SHEET_ID')
        self.service = build('sheets', 'v4', credentials=self.credentials)
        self.sheet = self.service.spreadsheets()
    
    def _get_credentials(self):
        creds_json = os.getenv('GOOGLE_CREDENTIALS')
        if not creds_json:
            raise ValueError("GOOGLE_CREDENTIALS environment variable not set")
        
        creds_dict = json.loads(creds_json)
        return Credentials.from_service_account_info(creds_dict)
    
    def _format_date_russian(self, dt):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ä—É—Å—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        months = [
            "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
            "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
        ]
        day = dt.day
        month = months[dt.month - 1]
        year = dt.year
        time = dt.strftime('%H:%M')
        return f"{day} {month} {year}, {time}"
    
    def _clean_week_number(self, week_str: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        if not week_str:
            return ""
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã (–ø—Ä–æ–±–µ–ª—ã, —Ç–æ—á–∫–∏ –∏ —Ç.–¥.)
        return re.sub(r"[^0-9]", "", str(week_str))
    
    def _safe_get_cell(self, row: List[str], index: int) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        try:
            if index < len(row):
                return row[index] if row[index] is not None else ""
            return ""
        except (IndexError, TypeError):
            return ""
    
    def get_previous_week_tasks(self, week_number: int) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏"""
        try:
            print(f"üîç –ò—â–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–µ–¥–µ–ª–∏ {week_number}, –ø—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è: {week_number - 1}")
            
            if week_number <= 1:
                print("‚ö†Ô∏è –ù–µ–¥–µ–ª—è <= 1, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                return []
            
            result = self.sheet.values().get(
                spreadsheetId=self.sheet_id,
                range='A:G'
            ).execute()
            
            values = result.get('values', [])
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {len(values)}")
            
            if not values:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è")
                return []
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if len(values) > 0:
                print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {values[0]}")
            
            prev_week = week_number - 1
            print(f"üéØ –ò—â–µ–º –Ω–µ–¥–µ–ª—é: '{prev_week}'")
            
            # –ò—â–µ–º –æ—Ç—á–µ—Ç –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é
            for i, row in enumerate(values[1:], 1):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
                week_cell = self._safe_get_cell(row, 1)  # –ö–æ–ª–æ–Ω–∫–∞ B (–∏–Ω–¥–µ–∫—Å 1)
                cleaned_week = self._clean_week_number(week_cell)
                
                print(f"üìÑ –°—Ç—Ä–æ–∫–∞ {i}: –¥–ª–∏–Ω–∞={len(row)}, –Ω–µ–¥–µ–ª—è='{week_cell}' -> –æ—á–∏—â–µ–Ω–Ω–∞—è='{cleaned_week}'")
                
                if cleaned_week == str(prev_week):
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –Ω–µ–¥–µ–ª–∏ {prev_week}")
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ F (–∏–Ω–¥–µ–∫—Å 5)
                    planned_tasks_cell = self._safe_get_cell(row, 5)
                    print(f"üìù –ö–æ–ª–æ–Ω–∫–∞ F (–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏): '{planned_tasks_cell}'")
                    
                    if planned_tasks_cell:
                        # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫–∏
                        planned_tasks = planned_tasks_cell.split('\n')
                        clean_tasks = [task.strip() for task in planned_tasks if task.strip()]
                        print(f"üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {clean_tasks}")
                        return clean_tasks
                    else:
                        print("‚ùå –ö–æ–ª–æ–Ω–∫–∞ F –ø—É—Å—Ç–∞—è")
            
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –Ω–µ–¥–µ–ª–∏ {prev_week}")
            return []
            
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
            return []
    
    def get_all_week_numbers(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            result = self.sheet.values().get(
                spreadsheetId=self.sheet_id,
                range='B:B'
            ).execute()
            
            values = result.get('values', [])
            if not values:
                return []
            
            week_numbers = []
            for row in values[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                week_cell = self._safe_get_cell(row, 0)
                cleaned_week = self._clean_week_number(week_cell)
                
                if cleaned_week and cleaned_week.isdigit():
                    week_numbers.append(int(cleaned_week))
            
            return sorted(list(set(week_numbers)))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        except Exception as e:
            print(f"Error getting week numbers: {e}")
            return []
    
    def delete_week_report(self, week_number: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é"""
        try:
            result = self.sheet.values().get(
                spreadsheetId=self.sheet_id,
                range='A:G'
            ).execute()
            
            values = result.get('values', [])
            if not values:
                return False
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –æ—Ç—á–µ—Ç–æ–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é
            for i, row in enumerate(values[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—Ç—Ä–æ–∫–∏ 2
                week_cell = self._safe_get_cell(row, 1)
                cleaned_week = self._clean_week_number(week_cell)
                
                if cleaned_week == str(week_number):
                    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
                    request = {
                        'requests': [
                            {
                                'deleteDimension': {
                                    'range': {
                                        'sheetId': 0,
                                        'dimension': 'ROWS',
                                        'startIndex': i - 1,
                                        'endIndex': i
                                    }
                                }
                            }
                        ]
                    }
                    
                    self.service.spreadsheets().batchUpdate(
                        spreadsheetId=self.sheet_id,
                        body=request
                    ).execute()
                    
                    print(f"‚úÖ Deleted report for week {week_number}")
                    return True
            
            return False
        except Exception as e:
            print(f"Error deleting week report: {e}")
            return False
    
    def save_report(self, week_number: int, completed_tasks: List[str], 
                   incomplete_tasks: List[str], planned_tasks: List[str], 
                   comment: str, rating: int) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Google Sheets"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å —Ä—É—Å—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã
            date_str = self._format_date_russian(datetime.now())
            completed_str = '\n'.join(completed_tasks) if completed_tasks else ''
            incomplete_str = '\n'.join(incomplete_tasks) if incomplete_tasks else ''
            planned_str = '\n'.join(planned_tasks) if planned_tasks else ''
            comment_str = comment if comment else ''
            
            # –ü–æ—Ä—è–¥–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —Ç–∞–±–ª–∏—Ü—ã:
            # A: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞
            # B: –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏  
            # C: –û—Ü–µ–Ω–∫–∞ –Ω–µ–¥–µ–ª–∏
            # D: –°–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            # E: –ù–µ —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            # F: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            # G: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            values = [[
                date_str,           # A: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞ (—Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)
                str(week_number),   # B: –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
                str(rating),        # C: –û—Ü–µ–Ω–∫–∞ –Ω–µ–¥–µ–ª–∏
                completed_str,      # D: –°–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                incomplete_str,     # E: –ù–µ —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                planned_str,        # F: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                comment_str         # G: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            ]]
            
            print(f"üìÖ Saving report with date: {date_str}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            result = self.sheet.values().get(
                spreadsheetId=self.sheet_id,
                range='A1:G1'
            ).execute()
            
            if not result.get('values'):
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = [['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞', '–ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏', '–û—Ü–µ–Ω–∫–∞ –Ω–µ–¥–µ–ª–∏', 
                          '–°–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', '–ù–µ —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']]
                self.sheet.values().update(
                    spreadsheetId=self.sheet_id,
                    range='A1:G1',
                    valueInputOption='USER_ENTERED',
                    body={'values': headers}
                ).execute()
                print("‚úÖ Headers added to sheet")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
            if self.check_week_exists(week_number):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç
                self._update_existing_report(week_number, values[0])
                print(f"‚úÖ Updated report for week {week_number}")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
                self.sheet.values().append(
                    spreadsheetId=self.sheet_id,
                    range='A:G',
                    valueInputOption='USER_ENTERED',
                    insertDataOption='INSERT_ROWS',
                    body={'values': values}
                ).execute()
                print(f"‚úÖ Added new report for week {week_number}")
            
            return True
        except Exception as e:
            print(f"Error saving report: {e}")
            return False
    
    def _update_existing_report(self, week_number: int, new_data: List[str]) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç"""
        try:
            result = self.sheet.values().get(
                spreadsheetId=self.sheet_id,
                range='A:G'
            ).execute()
            
            values = result.get('values', [])
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –æ—Ç—á–µ—Ç–æ–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é
            for i, row in enumerate(values[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—Ç—Ä–æ–∫–∏ 2
                week_cell = self._safe_get_cell(row, 1)
                cleaned_week = self._clean_week_number(week_cell)
                
                if cleaned_week == str(week_number):
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
                    range_name = f'A{i}:G{i}'
                    self.sheet.values().update(
                        spreadsheetId=self.sheet_id,
                        range=range_name,
                        valueInputOption='USER_ENTERED',
                        body={'values': [new_data]}
                    ).execute()
                    return True
            
            return False
        except Exception as e:
            print(f"Error updating existing report: {e}")
            return False
    
    def check_week_exists(self, week_number: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é"""
        try:
            result = self.sheet.values().get(
                spreadsheetId=self.sheet_id,
                range='A:B'
            ).execute()
            
            values = result.get('values', [])
            for row in values[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                week_cell = self._safe_get_cell(row, 1)
                cleaned_week = self._clean_week_number(week_cell)
                
                if cleaned_week == str(week_number):
                    return True
            return False
        except Exception as e:
            print(f"Error checking week existence: {e}")
            return False
    
    def clear_sheet(self) -> bool:
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤) - –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        try:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
            self.sheet.values().clear(
                spreadsheetId=self.sheet_id,
                range='A2:G1000'
            ).execute()
            print("‚úÖ Sheet cleared")
            return True
        except Exception as e:
            print(f"Error clearing sheet: {e}")
            return False
