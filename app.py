import os
import json
import asyncio
import queue
import threading
from flask import Flask, request, jsonify
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from bot_handlers import BotHandlers
from states import UserStates

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_TOKEN')
WEBHOOK_URL = "https://challange10k.onrender.com/webhook"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
update_queue = queue.Queue()
application = None
bot_loop = None
bot_thread = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = UserStates()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
bot_handlers = BotHandlers(user_states)

async def setup_application():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram"""
    global application
    
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", bot_handlers.start))
    application.add_handler(CallbackQueryHandler(bot_handlers.button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handlers.message_handler))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await application.initialize()
    await application.start()
    
    print("‚úÖ Telegram application initialized")
    return application

async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    try:
        bot = Bot(token=TOKEN)
        await bot.initialize()
        result = await bot.set_webhook(url=WEBHOOK_URL)
        await bot.shutdown()
        print(f"‚úÖ Webhook set: {result}")
        return result
    except Exception as e:
        print(f"‚ùå Error setting webhook: {e}")
        return False

async def process_updates():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    global application, update_queue
    
    print("üöÄ Starting update processor...")
    
    while True:
        try:
            # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            try:
                update_data = update_queue.get(timeout=1)
            except queue.Empty:
                continue
                
            if update_data is None:  # –°–∏–≥–Ω–∞–ª –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
                break
                
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
            update = Update.de_json(update_data, application.bot)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await application.process_update(update)
            
            print(f"‚úÖ Processed update: {update.update_id}")
            
        except Exception as e:
            print(f"‚ùå Error processing update: {e}")
            
        await asyncio.sleep(0.01)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global bot_loop
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –±–æ—Ç–∞
        bot_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(bot_loop)
        
        print("ü§ñ Starting bot thread...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        bot_loop.run_until_complete(setup_application())
        bot_loop.run_until_complete(setup_webhook())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
        bot_loop.run_until_complete(process_updates())
        
    except Exception as e:
        print(f"‚ùå Error in bot thread: {e}")
    finally:
        if bot_loop:
            bot_loop.close()

# Flask routes
@app.route('/', methods=['GET'])
def index():
    return "‚úÖ Weekly Report Bot is running!"

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
    try:
        json_data = request.get_json()
        
        if not json_data:
            print("‚ö†Ô∏è No JSON data received")
            return "No data", 400
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
        update_queue.put(json_data)
        
        print(f"üì® Update queued: {json_data.get('update_id', 'unknown')}")
        return "OK", 200
        
    except Exception as e:
        print(f"‚ùå Error in webhook: {e}")
        return "Error", 500

@app.route('/status', methods=['GET'])
def status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    return jsonify({
        "status": "running",
        "webhook_url": WEBHOOK_URL,
        "queue_size": update_queue.qsize(),
        "bot_running": bot_thread and bot_thread.is_alive()
    })

@app.route('/health', methods=['GET'])
def health():
    """Health check –¥–ª—è Render"""
    return "OK", 200

def start_bot_thread():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global bot_thread
    
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç —É—Å–ø–µ–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
    import time
    time.sleep(3)
    
    if bot_thread.is_alive():
        print("‚úÖ Bot thread started successfully")
    else:
        print("‚ùå Bot thread failed to start")

def shutdown_bot():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    global bot_loop, update_queue
    
    print("üõë Shutting down bot...")
    
    # –°–∏–≥–Ω–∞–ª –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    update_queue.put(None)
    
    if bot_loop and not bot_loop.is_closed():
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        try:
            asyncio.run_coroutine_threadsafe(application.stop(), bot_loop)
            asyncio.run_coroutine_threadsafe(application.shutdown(), bot_loop)
        except:
            pass

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
import signal
import atexit

def signal_handler(signum, frame):
    shutdown_bot()

signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)
atexit.register(shutdown_bot)

if __name__ == '__main__':
    print("üöÄ Starting Weekly Report Bot...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    start_bot_thread()
    
    # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    port = int(os.environ.get('PORT', 5000))
    print(f"üåê Starting Flask server on port {port}")
    
    try:
        app.run(
            host='0.0.0.0', 
            port=port, 
            debug=False, 
            threaded=True,
            use_reloader=False  # –í–∞–∂–Ω–æ! –û—Ç–∫–ª—é—á–∞–µ–º reloader
        )
    except KeyboardInterrupt:
        print("üõë Received shutdown signal")
        shutdown_bot()
